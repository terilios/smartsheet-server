name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Pre-release Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        npm ci
        cd smartsheet_ops
        pip install -e .
        pip install -r requirements-test.txt
        
    - name: Run comprehensive tests
      run: |
        npm run test:coverage
        cd smartsheet_ops
        pytest --cov=smartsheet_ops --cov-report=xml
        
    - name: Build and verify
      run: |
        npm run build
        node build/index.js --help

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        npm ci
        cd smartsheet_ops
        pip install -e .
        pip install build twine
        
    - name: Build TypeScript
      run: npm run build
      
    - name: Build Python package
      run: |
        cd smartsheet_ops
        python -m build
        
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Changes in ${{ steps.version.outputs.version }}
          
          ### Features
          - New MCP server capabilities
          - Enhanced healthcare analytics
          - Improved error handling
          
          ### Bug Fixes
          - Various stability improvements
          
          ### Dependencies
          - Updated to latest MCP SDK
          
          ## Installation
          
          ```bash
          npm install @terilios/smartsheet-server@${{ steps.version.outputs.version_number }}
          ```
          
          ## Python Package
          
          ```bash
          cd smartsheet_ops
          pip install .
          ```
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'alpha') }}
        
    - name: Publish to npm (if public)
      run: |
        # Only publish if package.json doesn't have "private": true
        if ! grep -q '"private":\s*true' package.json; then
          npm publish --access public
        else
          echo "Package is marked as private, skipping npm publish"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    # Note: Python package publishing would require PyPI credentials
    # - name: Publish Python package to PyPI
    #   if: success()
    #   run: |
    #     cd smartsheet_ops
    #     twine upload dist/*
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max